##
# CAS Server Context Configuration
#
cas.tgc.secure=false
cas.tgc.path=
cas.tgc.name=TGC
cas.tgc.domain=
cas.tgc.maxAge=-1
cas.tgc.crypto.enabled=false

cas.serviceRegistry.initFromJson=true
cas.serviceRegistry.json.location=classpath:/services
cas.server.name=https://passport.wuxia.tech:${server.port}
cas.server.prefix=${cas.server.name}${server.context-path}
server.context-path=/cas
server.port=8443

server.ssl.enabled=true
server.ssl.key-store=file:/Users/songlin/Desktop/tomcat.keystore
server.ssl.key-store-password=changeit
server.ssl.key-password=changeit
server.ssl.key-alias=tomcat
server.ssl.keyAlias=tomcat

#记住我
cas.ticket.tgt.rememberMe.enabled=false
cas.ticket.tgt.rememberMe.timeToKillInSeconds=3600

server.max-http-header-size=2097152
server.use-forward-headers=true
server.connection-timeout=20000
server.error.include-stacktrace=ALWAYS

server.compression.enabled=true
server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain

server.tomcat.max-http-post-size=2097152
server.tomcat.basedir=build/tomcat
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.accesslog.suffix=.log
server.tomcat.min-spare-threads=10
server.tomcat.max-threads=200
server.tomcat.port-header=X-Forwarded-Port
server.tomcat.protocol-header=X-Forwarded-Proto
server.tomcat.protocol-header-https-value=https
server.tomcat.remote-ip-header=X-FORWARDED-FOR
server.tomcat.uri-encoding=UTF-8

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

##
# CAS Cloud Bus Configuration
#
spring.cloud.bus.enabled=false

# Indicates that systemPropertiesOverride can be used.
# Set to false to prevent users from changing the default accidentally. Default true.
spring.cloud.config.allow-override=true

# External properties should override system properties.
spring.cloud.config.override-system-properties=false

# When allowOverride is true, external properties should take lowest priority, and not override any
# existing property sources (including local config files).
spring.cloud.config.override-none=false

# spring.cloud.bus.refresh.enabled=true
# spring.cloud.bus.env.enabled=true
# spring.cloud.bus.destination=CasCloudBus
# spring.cloud.bus.ack.enabled=true

endpoints.enabled=false
endpoints.sensitive=true

endpoints.restart.enabled=false
endpoints.shutdown.enabled=false

# Control the security of the management/actuator endpoints
# The 'enabled' flag below here controls the rendering of details for the health endpoint amongst other things.
management.security.enabled=true
management.security.roles=ACTUATOR,ADMIN
management.security.sessions=if_required
management.context-path=/status
management.add-application-context-header=false

# Define a CAS-specific "WARN" status code and its order
management.health.status.order=WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP

# Control the security of the management/actuator endpoints
# With basic authentication, assuming Spring Security and/or relevant modules are on the classpath.
security.basic.authorize-mode=role
security.basic.path=/cas/status/**
# security.basic.enabled=true
# security.user.name=casuser
# security.user.password=

##
# CAS Web Application Session Configuration
#
server.session.timeout=300
server.session.cookie.http-only=true
server.session.tracking-modes=COOKIE

##
# CAS Thymeleaf View Configuration
#
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=true
spring.thymeleaf.mode=HTML
spring.thymeleaf.template-resolver-order=100
##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS AspectJ Configuration
#
spring.aop.auto=true
spring.aop.proxy-target-class=true

##
# CAS Authentication Credentials
#
#cas.authn.accept.users=casuser::Mellon

#cas.authn.jdbc.query[0].sql=select id casAccountId, `password`,`salt`,is_obsolete_date status from u_cas_user where account_name = ?
#cas.authn.jdbc.query[0].healthQuery=SELECT 1
#cas.authn.jdbc.query[0].isolateInternalQueries=false
#cas.authn.jdbc.query[0].url=jdbc:mysql://192.168.1.10:3306/nfyy_base_info
#cas.authn.jdbc.query[0].failFast=true
#cas.authn.jdbc.query[0].isolationLevelName=ISOLATION_READ_COMMITTED
#cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.MySQLDialect
#cas.authn.jdbc.query[0].leakThreshold=10
#cas.authn.jdbc.query[0].propagationBehaviorName=PROPAGATION_REQUIRED
#cas.authn.jdbc.query[0].batchSize=1
#cas.authn.jdbc.query[0].user=nfyy
#cas.authn.jdbc.query[0].ddlAuto=create-dropll
#cas.authn.jdbc.query[0].maxAgeDays=180
#cas.authn.jdbc.query[0].password=NFYY2016@mysql.db
#cas.authn.jdbc.query[0].autocommit=false
#cas.authn.jdbc.query[0].driverClass=com.mysql.cj.jdbc.Driver
#cas.authn.jdbc.query[0].idleTimeout=5000
# cas.authn.jdbc.query[0].credentialCriteria=

# cas.authn.jdbc.query[0].passwordEncoder.type=NONE|DEFAULT|STANDARD|BCRYPT
# cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=
# cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=
# cas.authn.jdbc.query[0].passwordEncoder.secret=
# cas.authn.jdbc.query[0].passwordEncoder.strength=16

# cas.authn.jdbc.query[0].principalTransformation.suffix=
# cas.authn.jdbc.query[0].principalTransformation.caseConversion=NONE|UPPERCASE|LOWERCASE
# cas.authn.jdbc.query[0].principalTransformation.prefix=


##Encode Database Authentication 编码加密开始
##   对密码进行盐值处理再加密，增加了反查难度
##
##加密次数
#cas.authn.jdbc.encode[0].numberOfIterations=1024
##该列名的值可替代上面的值，但对密码加密时必须取该值进行处理
#cas.authn.jdbc.encode[0].numberOfIterationsFieldName=
## 盐值固定列
#cas.authn.jdbc.encode[0].saltFieldName=salt
##静态盐值
#cas.authn.jdbc.encode[0].staticSalt=
#cas.authn.jdbc.encode[0].sql=select `password`,`salt`, (case  when is_obsolete_date is null then 0 else 1 end)  status from security_user where account_name = ?
##对处理盐值后的算法
#cas.authn.jdbc.encode[0].algorithmName=MD5
##cas.authn.jdbc.encode[0].passwordFieldName=password
#cas.authn.jdbc.encode[0].expiredFieldName=
#cas.authn.jdbc.encode[0].disabledFieldName=status
#cas.authn.jdbc.encode[0].url=jdbc:mysql://192.168.1.10:3306/nfyy_base_info
#cas.authn.jdbc.encode[0].dialect=org.hibernate.dialect.MySQL5Dialect
#cas.authn.jdbc.encode[0].user=nfyy
#cas.authn.jdbc.encode[0].password=NFYY2016@mysql.db
#cas.authn.jdbc.encode[0].driverClass=com.mysql.cj.jdbc.Driver
##Encode Database Authentication 编码加密结束

#Encode Database Authentication 编码加密开始
#   对密码进行盐值处理再加密，增加了反查难度
#
#加密次数
custom.cas.authn.jdbc.numberOfIterations=1024
#该列名的值可替代上面的值，但对密码加密时必须取该值进行处理
custom.cas.authn.jdbc.numberOfIterationsFieldName=
# 盐值固定列
custom.cas.authn.jdbc.saltFieldName=salt
#静态盐值
custom.cas.authn.jdbc.staticSalt=
custom.cas.authn.jdbc.sql=select id, `password`,`salt`, is_obsolete_date status from security_user where account_name = ?
#对处理盐值后的算法
custom.cas.authn.jdbc.algorithmName=MD5
#custom.cas.authn.jdbc.passwordFieldName=password
custom.cas.authn.jdbc.expiredFieldName=
custom.cas.authn.jdbc.disabledFieldName=status
custom.cas.authn.jdbc.url=jdbc:mysql://192.168.1.10:3306/nfyy_base_info
custom.cas.authn.jdbc.dialect=org.hibernate.dialect.MySQL5Dialect
custom.cas.authn.jdbc.user=nfyy
custom.cas.authn.jdbc.password=NFYY2016@mysql.db
custom.cas.authn.jdbc.driverClass=com.mysql.cj.jdbc.Driver
#Encode Database Authentication 编码加密结束

#多属性返回(同样是各种试验，同事解决的哈)
cas.authn.attributeRepository.jdbc[0].singleRow=true
cas.authn.attributeRepository.jdbc[0].order=0
cas.authn.attributeRepository.jdbc[0].url=jdbc:mysql://192.168.1.10:3306/nfyy_base_info?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
cas.authn.attributeRepository.jdbc[0].user=nfyy
cas.authn.attributeRepository.jdbc[0].password=NFYY2016@mysql.db
cas.authn.attributeRepository.jdbc[0].sql=select * from security_user where {0}
cas.authn.attributeRepository.jdbc[0].username=account_name
#取消以下两行则在返回属性中仅包含表中的这两个字段属性，注释情况下返回该表行所有属性
cas.authn.attributeRepository.jdbc[0].attributes.id=casAccountId
cas.authn.attributeRepository.jdbc[0].attributes.account_name=accountName
cas.authn.attributeRepository.jdbc[0].dialect=org.hibernate.dialect.MySQL5Dialect
cas.authn.attributeRepository.jdbc[0].ddlAuto=none
cas.authn.attributeRepository.jdbc[0].driverClass=com.mysql.cj.jdbc.Driver
cas.authn.attributeRepository.jdbc[0].leakThreshold=10
#cas.authn.attributeRepository.jdbc[0].propagationBehaviorName=PROPAGATION_REQUIRED
cas.authn.attributeRepository.jdbc[0].batchSize=1
cas.authn.attributeRepository.jdbc[0].healthQuery=SELECT 1
#cas.authn.attributeRepository.jdbc[0].failFast=true


#GitHub OAuth Login
cas.authn.pac4j.github.id=e85a6d24352b3d4bbf42
cas.authn.pac4j.github.secret=661f74d606b7e7deb98173abe979d6e2d261775b
#cas.authn.pac4j.github.customParams.id=id
cas.authn.pac4j.github.clientName=Github


#WeChat OAuth Login
cas.authn.pac4j.oauth2[1].id=wxd9dcd6116ae04be1
#由于微信的不为clinet_id，为appid
cas.authn.pac4j.oauth2[1].customParams.appid=wxd9dcd6116ae04be1

#微信scope登录为snsapi_login
cas.authn.pac4j.oauth2[1].customParams.scope=snsapi_login
cas.authn.pac4j.oauth2[1].secret=b7b5d68cb6465ffbc2f23edaa5a377c0
cas.authn.pac4j.oauth2[1].customParams.secret=b7b5d68cb6465ffbc2f23edaa5a377c0
cas.authn.pac4j.oauth2[1].authUrl=https://open.weixin.qq.com/connect/qrconnect
cas.authn.pac4j.oauth2[1].tokenUrl=https://api.weixin.qq.com/sns/oauth2/access_token
cas.authn.pac4j.oauth2[1].profileUrl=https://api.weixin.qq.com/sns/userinfo
cas.authn.pac4j.oauth2[1].clientName=WeChat




cas.authn.oauth.refreshToken.timeToKillInSeconds=2592000
cas.authn.oauth.code.timeToKillInSeconds=30
cas.authn.oauth.code.numberOfUses=1
cas.authn.oauth.accessToken.releaseProtocolAttributes=true
cas.authn.oauth.accessToken.timeToKillInSeconds=7200
cas.authn.oauth.accessToken.maxTimeToLiveInSeconds=28800
cas.authn.oauth.grants.resourceOwner.requireServiceHeader=true
cas.authn.oauth.userProfileViewType=NESTED